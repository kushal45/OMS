# Custom Jenkins Dockerfile with Docker support and robust plugin management
# Using latest LTS version to support all modern plugins
FROM jenkins/jenkins:lts-jdk17

# Switch to root user to install Docker
USER root

# Install Docker
RUN apt-get update && \
    apt-get install -y \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg \
        lsb-release && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && \
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# Add jenkins user to docker group
RUN usermod -aG docker jenkins

# Install additional useful tools
RUN apt-get install -y \
    git \
    wget \
    unzip \
    vim \
    nano \
    htop \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js (useful for testing)
RUN curl -fsSL https://deb.nodesource.com/setup_21.x | bash - && \
    apt-get install -y nodejs

# Switch back to jenkins user
USER jenkins

# Create plugins.txt file for better dependency management
COPY plugins.txt /usr/share/jenkins/ref/plugins.txt

# Install Jenkins plugins with proper dependency resolution
# Using --latest and --latest-specified for best compatibility
RUN jenkins-plugin-cli \
    --plugin-file /usr/share/jenkins/ref/plugins.txt \
    --latest \
    --latest-specified \
    --verbose

# Set environment variables
ENV DOCKER_HOST=unix:///var/run/docker.sock
ENV JAVA_OPTS="-Djenkins.install.runSetupWizard=false"

# Expose Jenkins port
EXPOSE 8080 50000
