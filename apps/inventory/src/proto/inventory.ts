// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: apps/inventory/src/proto/inventory.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "INVENTORY_PACKAGE";

export interface OrderItem {
  productId: string;
  price: number;
  quantity: number;
}

export interface ValidateInventoryReq {
  orderItems: OrderItem[];
}

export interface InvalidOrderItemWithReason {
  orderItem: OrderItem | undefined;
  reasons: string[];
}

export interface ValidateInventoryRes {
  success: boolean;
  invalidOrderItems: InvalidOrderItemWithReason[];
}

export interface ReserveInventoryReq {
  userId: string;
  itemsToReserve: OrderItem[];
}

export interface ReservationStatus {
  productId: string;
  reserved: boolean;
  reason: string;
  currentStock: number;
}

export interface ReserveInventoryRes {
  overallSuccess: boolean;
  reservationDetails: ReservationStatus[];
}

export interface ReleaseInventoryReq {
  userId: string;
  type:"place-order"| "clear-cart";
  itemsToRelease: OrderItem[];
}

export interface ReleaseStatus {
  productId: string;
  released: boolean;
  reason: string;
  currentStock: number;
}

export interface ReleaseInventoryRes {
  overallSuccess: boolean;
  releaseDetails: ReleaseStatus[];
}

function createBaseOrderItem(): OrderItem {
  return { productId: "", price: 0, quantity: 0 };
}

export const OrderItem: MessageFns<OrderItem> = {
  encode(message: OrderItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.price !== 0) {
      writer.uint32(16).int32(message.price);
    }
    if (message.quantity !== 0) {
      writer.uint32(24).int32(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderItem {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
    };
  },

  toJSON(message: OrderItem): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderItem>, I>>(base?: I): OrderItem {
    return OrderItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderItem>, I>>(object: I): OrderItem {
    const message = createBaseOrderItem();
    message.productId = object.productId ?? "";
    message.price = object.price ?? 0;
    message.quantity = object.quantity ?? 0;
    return message;
  },
};

function createBaseValidateInventoryReq(): ValidateInventoryReq {
  return { orderItems: [] };
}

export const ValidateInventoryReq: MessageFns<ValidateInventoryReq> = {
  encode(message: ValidateInventoryReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orderItems) {
      OrderItem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateInventoryReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateInventoryReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderItems.push(OrderItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateInventoryReq {
    return {
      orderItems: globalThis.Array.isArray(object?.orderItems)
        ? object.orderItems.map((e: any) => OrderItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ValidateInventoryReq): unknown {
    const obj: any = {};
    if (message.orderItems?.length) {
      obj.orderItems = message.orderItems.map((e) => OrderItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateInventoryReq>, I>>(base?: I): ValidateInventoryReq {
    return ValidateInventoryReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateInventoryReq>, I>>(object: I): ValidateInventoryReq {
    const message = createBaseValidateInventoryReq();
    message.orderItems = object.orderItems?.map((e) => OrderItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInvalidOrderItemWithReason(): InvalidOrderItemWithReason {
  return { orderItem: undefined, reasons: [] };
}

export const InvalidOrderItemWithReason: MessageFns<InvalidOrderItemWithReason> = {
  encode(message: InvalidOrderItemWithReason, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderItem !== undefined) {
      OrderItem.encode(message.orderItem, writer.uint32(10).fork()).join();
    }
    for (const v of message.reasons) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvalidOrderItemWithReason {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvalidOrderItemWithReason();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderItem = OrderItem.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reasons.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvalidOrderItemWithReason {
    return {
      orderItem: isSet(object.orderItem) ? OrderItem.fromJSON(object.orderItem) : undefined,
      reasons: globalThis.Array.isArray(object?.reasons) ? object.reasons.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: InvalidOrderItemWithReason): unknown {
    const obj: any = {};
    if (message.orderItem !== undefined) {
      obj.orderItem = OrderItem.toJSON(message.orderItem);
    }
    if (message.reasons?.length) {
      obj.reasons = message.reasons;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InvalidOrderItemWithReason>, I>>(base?: I): InvalidOrderItemWithReason {
    return InvalidOrderItemWithReason.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InvalidOrderItemWithReason>, I>>(object: I): InvalidOrderItemWithReason {
    const message = createBaseInvalidOrderItemWithReason();
    message.orderItem = (object.orderItem !== undefined && object.orderItem !== null)
      ? OrderItem.fromPartial(object.orderItem)
      : undefined;
    message.reasons = object.reasons?.map((e) => e) || [];
    return message;
  },
};

function createBaseValidateInventoryRes(): ValidateInventoryRes {
  return { success: false, invalidOrderItems: [] };
}

export const ValidateInventoryRes: MessageFns<ValidateInventoryRes> = {
  encode(message: ValidateInventoryRes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    for (const v of message.invalidOrderItems) {
      InvalidOrderItemWithReason.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateInventoryRes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateInventoryRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.invalidOrderItems.push(InvalidOrderItemWithReason.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateInventoryRes {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      invalidOrderItems: globalThis.Array.isArray(object?.invalidOrderItems)
        ? object.invalidOrderItems.map((e: any) => InvalidOrderItemWithReason.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ValidateInventoryRes): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.invalidOrderItems?.length) {
      obj.invalidOrderItems = message.invalidOrderItems.map((e) => InvalidOrderItemWithReason.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateInventoryRes>, I>>(base?: I): ValidateInventoryRes {
    return ValidateInventoryRes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateInventoryRes>, I>>(object: I): ValidateInventoryRes {
    const message = createBaseValidateInventoryRes();
    message.success = object.success ?? false;
    message.invalidOrderItems = object.invalidOrderItems?.map((e) => InvalidOrderItemWithReason.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReserveInventoryReq(): ReserveInventoryReq {
  return { userId: "", itemsToReserve: [] };
}

export const ReserveInventoryReq: MessageFns<ReserveInventoryReq> = {
  encode(message: ReserveInventoryReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.itemsToReserve) {
      OrderItem.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReserveInventoryReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReserveInventoryReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.itemsToReserve.push(OrderItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReserveInventoryReq {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      itemsToReserve: globalThis.Array.isArray(object?.itemsToReserve)
        ? object.itemsToReserve.map((e: any) => OrderItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReserveInventoryReq): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.itemsToReserve?.length) {
      obj.itemsToReserve = message.itemsToReserve.map((e) => OrderItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReserveInventoryReq>, I>>(base?: I): ReserveInventoryReq {
    return ReserveInventoryReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReserveInventoryReq>, I>>(object: I): ReserveInventoryReq {
    const message = createBaseReserveInventoryReq();
    message.userId = object.userId ?? "";
    message.itemsToReserve = object.itemsToReserve?.map((e) => OrderItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReservationStatus(): ReservationStatus {
  return { productId: "", reserved: false, reason: "", currentStock: 0 };
}

export const ReservationStatus: MessageFns<ReservationStatus> = {
  encode(message: ReservationStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.reserved !== false) {
      writer.uint32(16).bool(message.reserved);
    }
    if (message.reason !== "") {
      writer.uint32(26).string(message.reason);
    }
    if (message.currentStock !== 0) {
      writer.uint32(32).int32(message.currentStock);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReservationStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReservationStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.reserved = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.currentStock = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReservationStatus {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      reserved: isSet(object.reserved) ? globalThis.Boolean(object.reserved) : false,
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      currentStock: isSet(object.currentStock) ? globalThis.Number(object.currentStock) : 0,
    };
  },

  toJSON(message: ReservationStatus): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.reserved !== false) {
      obj.reserved = message.reserved;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    if (message.currentStock !== 0) {
      obj.currentStock = Math.round(message.currentStock);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReservationStatus>, I>>(base?: I): ReservationStatus {
    return ReservationStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReservationStatus>, I>>(object: I): ReservationStatus {
    const message = createBaseReservationStatus();
    message.productId = object.productId ?? "";
    message.reserved = object.reserved ?? false;
    message.reason = object.reason ?? "";
    message.currentStock = object.currentStock ?? 0;
    return message;
  },
};

function createBaseReserveInventoryRes(): ReserveInventoryRes {
  return { overallSuccess: false, reservationDetails: [] };
}

export const ReserveInventoryRes: MessageFns<ReserveInventoryRes> = {
  encode(message: ReserveInventoryRes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.overallSuccess !== false) {
      writer.uint32(8).bool(message.overallSuccess);
    }
    for (const v of message.reservationDetails) {
      ReservationStatus.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReserveInventoryRes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReserveInventoryRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.overallSuccess = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reservationDetails.push(ReservationStatus.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReserveInventoryRes {
    return {
      overallSuccess: isSet(object.overallSuccess) ? globalThis.Boolean(object.overallSuccess) : false,
      reservationDetails: globalThis.Array.isArray(object?.reservationDetails)
        ? object.reservationDetails.map((e: any) => ReservationStatus.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReserveInventoryRes): unknown {
    const obj: any = {};
    if (message.overallSuccess !== false) {
      obj.overallSuccess = message.overallSuccess;
    }
    if (message.reservationDetails?.length) {
      obj.reservationDetails = message.reservationDetails.map((e) => ReservationStatus.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReserveInventoryRes>, I>>(base?: I): ReserveInventoryRes {
    return ReserveInventoryRes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReserveInventoryRes>, I>>(object: I): ReserveInventoryRes {
    const message = createBaseReserveInventoryRes();
    message.overallSuccess = object.overallSuccess ?? false;
    message.reservationDetails = object.reservationDetails?.map((e) => ReservationStatus.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReleaseInventoryReq(): ReleaseInventoryReq {
  return { userId: "", type: "place-order", itemsToRelease: [] };
}

export const ReleaseInventoryReq: MessageFns<ReleaseInventoryReq> = {
  encode(message: ReleaseInventoryReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.type !== "place-order") {
      writer.uint32(18).string(message.type);
    }
    for (const v of message.itemsToRelease) {
      OrderItem.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReleaseInventoryReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReleaseInventoryReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.itemsToRelease.push(OrderItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReleaseInventoryReq {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      type: isSet(object.type) ? object.type : "place-order",
      itemsToRelease: globalThis.Array.isArray(object?.itemsToRelease)
        ? object.itemsToRelease.map((e: any) => OrderItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReleaseInventoryReq): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.type !== "place-order") {
      obj.type = message.type;
    }
    if (message.itemsToRelease?.length) {
      obj.itemsToRelease = message.itemsToRelease.map((e) => OrderItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReleaseInventoryReq>, I>>(base?: I): ReleaseInventoryReq {
    return ReleaseInventoryReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReleaseInventoryReq>, I>>(object: I): ReleaseInventoryReq {
    const message = createBaseReleaseInventoryReq();
    message.userId = object.userId ?? "";
    message.itemsToRelease = object.itemsToRelease?.map((e) => OrderItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReleaseStatus(): ReleaseStatus {
  return { productId: "", released: false, reason: "", currentStock: 0 };
}

export const ReleaseStatus: MessageFns<ReleaseStatus> = {
  encode(message: ReleaseStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.released !== false) {
      writer.uint32(16).bool(message.released);
    }
    if (message.reason !== "") {
      writer.uint32(26).string(message.reason);
    }
    if (message.currentStock !== 0) {
      writer.uint32(32).int32(message.currentStock);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReleaseStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReleaseStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.released = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.currentStock = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReleaseStatus {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      released: isSet(object.released) ? globalThis.Boolean(object.released) : false,
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      currentStock: isSet(object.currentStock) ? globalThis.Number(object.currentStock) : 0,
    };
  },

  toJSON(message: ReleaseStatus): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.released !== false) {
      obj.released = message.released;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    if (message.currentStock !== 0) {
      obj.currentStock = Math.round(message.currentStock);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReleaseStatus>, I>>(base?: I): ReleaseStatus {
    return ReleaseStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReleaseStatus>, I>>(object: I): ReleaseStatus {
    const message = createBaseReleaseStatus();
    message.productId = object.productId ?? "";
    message.released = object.released ?? false;
    message.reason = object.reason ?? "";
    message.currentStock = object.currentStock ?? 0;
    return message;
  },
};

function createBaseReleaseInventoryRes(): ReleaseInventoryRes {
  return { overallSuccess: false, releaseDetails: [] };
}

export const ReleaseInventoryRes: MessageFns<ReleaseInventoryRes> = {
  encode(message: ReleaseInventoryRes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.overallSuccess !== false) {
      writer.uint32(8).bool(message.overallSuccess);
    }
    for (const v of message.releaseDetails) {
      ReleaseStatus.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReleaseInventoryRes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReleaseInventoryRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.overallSuccess = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 26) {
            break;
          }

          message.releaseDetails.push(ReleaseStatus.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReleaseInventoryRes {
    return {
      overallSuccess: isSet(object.overallSuccess) ? globalThis.Boolean(object.overallSuccess) : false,
      releaseDetails: globalThis.Array.isArray(object?.releaseDetails)
        ? object.releaseDetails.map((e: any) => ReleaseStatus.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReleaseInventoryRes): unknown {
    const obj: any = {};
    if (message.overallSuccess !== false) {
      obj.overallSuccess = message.overallSuccess;
    }
    if (message.releaseDetails?.length) {
      obj.releaseDetails = message.releaseDetails.map((e) => ReleaseStatus.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReleaseInventoryRes>, I>>(base?: I): ReleaseInventoryRes {
    return ReleaseInventoryRes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReleaseInventoryRes>, I>>(object: I): ReleaseInventoryRes {
    const message = createBaseReleaseInventoryRes();
    message.overallSuccess = object.overallSuccess ?? false;
    message.releaseDetails = object.releaseDetails?.map((e) => ReleaseStatus.fromPartial(e)) || [];
    return message;
  },
};

export type InventoryServiceService = typeof InventoryServiceService;
export const InventoryServiceService = {
  validate: {
    path: "/INVENTORY_PACKAGE.InventoryService/validate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ValidateInventoryReq) => Buffer.from(ValidateInventoryReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ValidateInventoryReq.decode(value),
    responseSerialize: (value: ValidateInventoryRes) => Buffer.from(ValidateInventoryRes.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ValidateInventoryRes.decode(value),
  },
  reserveInventory: {
    path: "/INVENTORY_PACKAGE.InventoryService/reserveInventory",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ReserveInventoryReq) => Buffer.from(ReserveInventoryReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ReserveInventoryReq.decode(value),
    responseSerialize: (value: ReserveInventoryRes) => Buffer.from(ReserveInventoryRes.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ReserveInventoryRes.decode(value),
  },
  releaseInventory: {
    path: "/INVENTORY_PACKAGE.InventoryService/releaseInventory",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ReleaseInventoryReq) => Buffer.from(ReleaseInventoryReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ReleaseInventoryReq.decode(value),
    responseSerialize: (value: ReleaseInventoryRes) => Buffer.from(ReleaseInventoryRes.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ReleaseInventoryRes.decode(value),
  },
} as const;

export interface InventoryServiceServer extends UntypedServiceImplementation {
  validate: handleUnaryCall<ValidateInventoryReq, ValidateInventoryRes>;
  reserveInventory: handleUnaryCall<ReserveInventoryReq, ReserveInventoryRes>;
  releaseInventory: handleUnaryCall<ReleaseInventoryReq, ReleaseInventoryRes>;
}

export interface InventoryServiceClient extends Client {
  validate(
    request: ValidateInventoryReq,
    callback: (error: ServiceError | null, response: ValidateInventoryRes) => void,
  ): ClientUnaryCall;
  validate(
    request: ValidateInventoryReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ValidateInventoryRes) => void,
  ): ClientUnaryCall;
  validate(
    request: ValidateInventoryReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ValidateInventoryRes) => void,
  ): ClientUnaryCall;
  reserveInventory(
    request: ReserveInventoryReq,
    callback: (error: ServiceError | null, response: ReserveInventoryRes) => void,
  ): ClientUnaryCall;
  reserveInventory(
    request: ReserveInventoryReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ReserveInventoryRes) => void,
  ): ClientUnaryCall;
  reserveInventory(
    request: ReserveInventoryReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ReserveInventoryRes) => void,
  ): ClientUnaryCall;
  releaseInventory(
    request: ReleaseInventoryReq,
    callback: (error: ServiceError | null, response: ReleaseInventoryRes) => void,
  ): ClientUnaryCall;
  releaseInventory(
    request: ReleaseInventoryReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ReleaseInventoryRes) => void,
  ): ClientUnaryCall;
  releaseInventory(
    request: ReleaseInventoryReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ReleaseInventoryRes) => void,
  ): ClientUnaryCall;
}

export const InventoryServiceClient = makeGenericClientConstructor(
  InventoryServiceService,
  "INVENTORY_PACKAGE.InventoryService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): InventoryServiceClient;
  service: typeof InventoryServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
