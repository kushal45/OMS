services:
  # Infrastructure Services
  postgres:
    image: postgres:14-alpine
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: oms
    networks:
      - oms
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_BROKER_ID: 1
      KAFKA_NODE_ID: 1
      KAFKA_LOG_DIRS: '/tmp/kafka-logs'
      CLUSTER_ID: 'DK3WNslFRemFujcyCzKORw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - oms
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 256M
          cpus: '0.1'

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - oms
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "-p", "6379", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Application Services
  app-base:
    image: oms-app-base:latest
    build:
      context: .
      dockerfile: Dockerfile
    command: echo "Base image built successfully"
    profiles:
      - build-only

  gateway:
    image: oms-app-base:latest
    depends_on:
      auth:
        condition: service_healthy
      order:
        condition: service_healthy
    ports:
      - "3000:3000"
      - "9229:9229"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://gateway:3000/api-gateway/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    environment:
      - NODE_ENV=development
      - PORT=3000
      - SERVICE_NAME=gateway
    command: npm run start:debug --project api-gateway
    networks:
      - oms
    volumes:
      - ./:/app
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'

  auth:
    image: oms-app-base:latest
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3001:3001"
      - "9230:9229"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=oms
    command: npm run start:debug --project auth
    networks:
      - oms
    volumes:
      - ./:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://auth:3001/auth/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'

  order:
    image: oms-app-base:latest
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3002:3002"
      - "9231:9229"
    environment:
        - NODE_ENV=development
        - DATABASE_HOST=postgres
        - DATABASE_PORT=5432
        - DATABASE_USER=postgres
        - DATABASE_PASSWORD=postgres
        - DATABASE_NAME=oms
        - KAFKA_BROKERS=kafka:9092
    command: npm run start:debug --project order
    networks:
      - oms
    volumes:
      - ./:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://order:3002/orders/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'

  inventory:
    image: oms-app-base:latest
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3003:3003"
      - "5002:5002"
      - "9232:9229"
    environment:
      - KAFKA_BROKERS=kafka:9092
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=oms
    command: npm run start:debug --project inventory
    networks:
      - oms
    volumes:
      - ./:/app
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'

  product:
    image: oms-app-base:latest
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3004:3004"
      - "9233:9229"
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=oms
      - PORT=3004
      - KAFKA_BROKERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    command: npm run start:debug --project product
    networks:
      - oms
    volumes:
      - ./:/app
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'

  cart:
    image: oms-app-base:latest
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3005:3005"
      - "9234:9229"
      - "5005:5005"
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=oms
      - PORT=3005
      - SERVICE_NAME=cart
      - KAFKA_BROKERS=kafka:9092
      - INVENTORY_RESERVE_TOPIC=reserveInventory
      - INVENTORY_RELEASE_TOPIC=releaseInventory
    command: npm run start:debug --project cart
    networks:
      - oms
    volumes:
      - ./:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://cart:3005/cart/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'

volumes:
  postgres_data:

networks:
  oms:
    driver: bridge
