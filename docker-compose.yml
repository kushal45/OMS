services:
  gateway:
    build:
      context: .
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://gateway:3000/api-gateway/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      auth:
        condition: service_healthy
      order:
       condition: service_healthy
     
    environment:
      - NODE_ENV=development
      - PORT=3000
      - ELASTICSEARCH_HOST=http://es01:9200
      - SERVICE_NAME=gateway
    command: npm run  start:debug  --project api-gateway
    networks:
      - oms
    volumes:
      - ./:/app
  auth:
    build:
      context: .
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - es01
    command: npm run  start:debug  --project auth
    networks:
      - oms
    volumes:
      - ./:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://auth:3001/auth/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  order:
    build:
      context: .
    ports:
      - "3002:3002"
    depends_on:
      - postgres
      - es01
    command: npm run  start:debug  --project order
    networks:
      - oms
    volumes:
      - ./:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://order:3002/orders/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  inventory:
    build:
      context: .
    ports:
      - "3003:3003"
    depends_on:
      - postgres
    command: npm run  start:debug  --project inventory
    networks:
      - oms
    volumes:
      - ./:/app
    
  product:
    build:
      context: .
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=oms
      - PORT=3004
    depends_on:
      - postgres
    command: npm run  start:debug  --project product
    networks:
      - oms
    volumes:
      - ./:/app
  postgres:
    image: postgres:14-alpine
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: oms
    networks:
      - oms
    volumes:
      - postgres_data:/var/lib/postgresql/data
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - oms

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata2:/usr/share/elasticsearch/data
    networks:
      - oms

  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata3:/usr/share/elasticsearch/data
    networks:
      - oms

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.2
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://es01:9200
    networks:
      - oms
  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_KRAFT_MODE: 'true'
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093,3@kafka3:9093"
      KAFKA_LISTENERS: "PLAINTEXT://kafka1:9092,CONTROLLER://kafka1:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9092"
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      CLUSTER_ID: DK3WNslFRemFujcyCzKORw
    volumes:
      - kafka1_data:/var/lib/kafka/data
    networks:
      - oms

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    ports:
      - "9094:9092"
    environment:
      KAFKA_KRAFT_MODE: 'true'
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 2
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093,3@kafka3:9093"
      KAFKA_LISTENERS: "PLAINTEXT://kafka2:9092,CONTROLLER://kafka2:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9094"
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      CLUSTER_ID: DK3WNslFRemFujcyCzKORw
    volumes:
      - kafka2_data:/var/lib/kafka/data
    networks:
      - oms

  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka3
    ports:
      - "9095:9092"
    environment:
      KAFKA_KRAFT_MODE: 'true'
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 3
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093,3@kafka3:9093"
      KAFKA_LISTENERS: "PLAINTEXT://kafka3:9092,CONTROLLER://kafka3:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9095"
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      CLUSTER_ID: DK3WNslFRemFujcyCzKORw
    volumes:
      - kafka3_data:/var/lib/kafka/data
    networks:
      - oms
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9092,kafka3:9092
    networks:
      - oms

volumes:
  postgres_data:
  esdata1:
  esdata2:
  esdata3:
  kafka1_data:
  kafka2_data:
  kafka3_data:

networks:
  oms:
    driver: bridge