services:
  gateway:
    build:
      context: .
    ports:
      - "3000:3000"
      - "9229:9229" # Debug port for gateway (host:container)
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://gateway:3000/api-gateway/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      migrations:
        condition: service_completed_successfully
      auth:
        condition: service_healthy
      order:
        condition: service_healthy
     
    environment:
      - NODE_ENV=development
      - PORT=3000
      - ELASTICSEARCH_HOST=http://es01:9200,http://es02:9200,http://es03:9200
      - SERVICE_NAME=gateway
    # IMPORTANT: Ensure your 'npm run start:debug --project api-gateway'
    # starts Node with '--inspect=0.0.0.0:9229'
    # Example: If start:debug is 'nest start --debug --watch',
    # you might need a script like 'start:dockerdebug': 'nest start --debug 0.0.0.0:9229 --watch'
    # and use 'npm run start:dockerdebug --project api-gateway' here.
    command: npm run start:debug  --project api-gateway # User needs to ensure this script enables inspect on 0.0.0.0:9229
    networks:
      - oms
    volumes:
      - ./:/app
    develop:
      watch:
        - action: sync
          path: ./
          target: /app
  auth:
    build:
      context: .
    ports:
      - "3001:3001"
      - "9230:9229" # Debug port for auth (host:container)
    depends_on:
      migrations:
        condition: service_completed_successfully
      postgres: # Still need postgres for the service itself, but migrations ensure schema is ready
        condition: service_healthy
      es01:
        condition: service_healthy
    # IMPORTANT: Ensure this script starts Node with '--inspect=0.0.0.0:9229'
    command: npm run  start:debug  --project auth # User needs to ensure this script enables inspect on 0.0.0.0:9229
    networks:
      - oms
    volumes:
      - ./:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://auth:3001/auth/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  order:
    build:
      context: .
    ports:
      - "3002:3002"
      - "9231:9229" # Debug port for order (host:container)
    depends_on:
      migrations:
        condition: service_completed_successfully
      postgres: # Still need postgres for the service itself
        condition: service_healthy
      es01:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    environment:
        - NODE_ENV=development
        - DATABASE_HOST=postgres
        - DATABASE_PORT=5432
        - DATABASE_USER=postgres
        - DATABASE_PASSWORD=postgres
        - DATABASE_NAME=oms
    # IMPORTANT: Ensure this script starts Node with '--inspect=0.0.0.0:9229'
    command: npm run  start:debug  --project order # User needs to ensure this script enables inspect on 0.0.0.0:9229
    networks:
      - oms
    volumes:
      - ./:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://order:3002/orders/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  inventory:
    build:
      context: .
    ports:
      - "3003:3003" # App port
      - "5002:5002" # gRPC port
      - "9232:9229" # Debug port for inventory (host:container)
    depends_on:
      migrations:
        condition: service_completed_successfully
      postgres: # Still need postgres for the service itself
        condition: service_healthy
      es01:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    # IMPORTANT: Ensure this script starts Node with '--inspect=0.0.0.0:9229'
    command: npm run  start:debug  --project inventory # User needs to ensure this script enables inspect on 0.0.0.0:9229
    networks:
      - oms
    volumes:
      - ./:/app
    
  product:
    build:
      context: .
    ports:
      - "3004:3004" # Assuming this is the cart service based on previous work
      - "9233:9229" # Debug port for product/cart (host:container)
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=oms
      - PORT=3004
    depends_on:
      migrations:
        condition: service_completed_successfully
      postgres: # Still need postgres for the service itself
        condition: service_healthy
    # IMPORTANT: Ensure this script starts Node with '--inspect=0.0.0.0:9229'
    # Assuming this is the 'cart' service, if 'product' is separate, add similar config for it.
    command: npm run  start:debug  --project product # Or 'cart' if this is the cart service. User needs to ensure inspect on 0.0.0.0:9229
    networks:
      - oms
    volumes:
      - ./:/app
  migrations:
    build:
      context: .
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${POSTGRES_USER:-postgres} # Use from .env or default
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD:-postgres} # Use from .env or default
      - DATABASE_NAME=${POSTGRES_DB:-oms} # Use from .env or default
    command: node run-migration.js
    networks:
      - oms
    volumes:
      - ./:/app # Mount the current directory to access run-migration.js and package.json

  postgres:
    image: postgres:14-alpine
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: oms
    networks:
      - oms
    volumes:
      - postgres_data:/var/lib/postgresql/data
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - oms

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata2:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - oms

  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata3:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - oms

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.2
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://es01:9200
    networks:
      - oms
  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    ports:
      - "9092:9092"
      - "9093:9093"
    healthcheck:
      test: ["CMD", "bash", "-c", "/usr/bin/kafka-broker-api-versions --bootstrap-server=kafka1:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      KAFKA_KRAFT_MODE: 'true'
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093,3@kafka3:9093"
      KAFKA_LISTENERS: "PLAINTEXT://kafka1:9092,CONTROLLER://kafka1:9093,EXTERNAL://kafka1:29092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:9092,EXTERNAL://host.docker.internal:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      CLUSTER_ID: DK3WNslFRemFujcyCzKORw
    volumes:
      - kafka1_data:/var/lib/kafka/data
    networks:
      - oms

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    ports:
      - "9094:9092"
      - "9096:9093"
    healthcheck:
      test: ["CMD", "bash", "-c", "/usr/bin/kafka-broker-api-versions --bootstrap-server=kafka2:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      KAFKA_KRAFT_MODE: 'true'
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 2
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093,3@kafka3:9093"
      KAFKA_LISTENERS: "PLAINTEXT://kafka2:9092,CONTROLLER://kafka2:9093,EXTERNAL://kafka2:29094"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka2:9092,EXTERNAL://host.docker.internal:29094"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      CLUSTER_ID: DK3WNslFRemFujcyCzKORw
    volumes:
      - kafka2_data:/var/lib/kafka/data
    networks:
      - oms

  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka3
    ports:
      - "9095:9092"
      - "9097:9093"
    healthcheck:
      test: ["CMD", "bash", "-c", "/usr/bin/kafka-broker-api-versions --bootstrap-server=kafka3:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      KAFKA_KRAFT_MODE: 'true'
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 3
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093,3@kafka3:9093"
      KAFKA_LISTENERS: "PLAINTEXT://kafka3:9092,CONTROLLER://kafka3:9093,EXTERNAL://kafka3:29095"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka3:9092,EXTERNAL://host.docker.internal:29095"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      CLUSTER_ID: DK3WNslFRemFujcyCzKORw
    volumes:
      - kafka3_data:/var/lib/kafka/data
    networks:
      - oms
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    platform: linux/amd64
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka1:9092,kafka2:9092,kafka3:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_PORT: 9000
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - oms
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:9092,PLAINTEXT://kafka2:9092,PLAINTEXT://kafka3:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    ports:
      - "8081:8081"
    networks:
      - oms
  apm-server:
    image: docker.elastic.co/apm/apm-server:8.15.2
    depends_on:
      es01:
        condition: service_healthy
    environment:
      - output.elasticsearch.hosts=["http://es01:9200"]
      - apm-server.host=0.0.0.0:8200
      - apm-server.secret_token=changeme
      - apm-server.enable_rum=true
    ports:
      - "8200:8200"
    networks:
      - oms
  cart:
    build:
      context: .
    ports:
      - "3005:3005"
      - "9234:9229" # Debug port for cart (host:container)
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=oms
      - PORT=3005
    depends_on:
      migrations:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      es01:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    command: npm run start:debug --project cart
    networks:
      - oms
    volumes:
      - ./:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://cart:3005/cart/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  esdata1:
  esdata2:
  esdata3:
  kafka1_data:
  kafka2_data:
  kafka3_data:

networks:
  oms:
    driver: bridge
